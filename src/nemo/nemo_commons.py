from netCDF4 import Dataset
from mpl_toolkits.basemap import Basemap

__author__ = 'huziy'


varname_to_colorlevels = {
    "sosstsst": [0, 1, 4, 8, 12, 16, 20, 24, 28, 30]
}


def get_mask(path = "/skynet3_rech1/huziy/NEMO_OFFICIAL/dev_v3_4_STABLE_2012/NEMOGCM/CONFIG/GLK/EXP01/bathy_meter.nc"):
    ds = Dataset(path)
    mask = ds.variables["Bathymetry"][:]
    ds.close()
    if hasattr(mask, "mask"):
        return ~mask.mask
    else:
        return (mask > 0) & (mask < 1e20)

def get_basemap_and_coordinates_from_file(path = ""):
    """
    Returns default basemap, lons and lats from given path
    :param path:
    :return:
    """
    lons, lats = get_2d_lons_lats_from_nemo(path)
    basemap = get_default_basemap_for_glk(lons, lats)
    return basemap, lons, lats



def get_default_basemap_for_glk(lons, lats):
    marginy = 1  # margin of the map in degrees
    marginx = 2

    return Basemap(epsg=3175,
                   llcrnrlon=lons.min() - marginx,
                   llcrnrlat=lats.min() - marginy,
                   urcrnrlon=lons.max() + marginx,
                   urcrnrlat=lats.max() + marginy,
                   resolution="l")


CACHE_COORDINATES = {}


def get_2d_lons_lats_from_nemo(path):
    """
    :param path:
    :return: 2D longitudes and latitudes from a file generated by nemo model
    """
    if path in CACHE_COORDINATES:
        return CACHE_COORDINATES[path]

    ds = Dataset(path)
    lons = ds.variables["nav_lon"][:]
    lats = ds.variables["nav_lat"][:]
    ds.close()

    CACHE_COORDINATES[path] = (lons, lats)
    return lons, lats
