from netCDF4 import Dataset, OrderedDict
from matplotlib import cm
from mpl_toolkits.basemap import Basemap
from domains.rotated_lat_lon import RotatedLatLon

__author__ = 'huziy'

mean_earth_radius_m_crcm5 = 0.637122e7  # mean earth radius used in the CRCM5 model for area calculation
mean_earth_radius_km_crcm5 = mean_earth_radius_m_crcm5 * 1.0e-3

varname_to_colorlevels = {
    "sosstsst": [0, 2, 4, 8, 10, 12, 13, 14, 15, 18, 20, 25, 30],
    "votemper": list(range(0, 30, 2))

}

varname_to_cmapname = {
    "sosstsst": "coolwarm",
    "votemper": "jet"
}
from nemo.generate_grid import nemo_domain_properties as domprops


lake_to_folder_with_sim_data_1981_2000_seplakes_exp = {
    "Superior": "/skynet3_rech1/huziy/NEMO_OFFICIAL/Simulations/1981-2000_Sim_per_lake_100yr_spinup_LIM3/Superior",
    "Michigan": "/skynet3_rech1/huziy/NEMO_OFFICIAL/Simulations/1981-2000_Sim_per_lake_100yr_spinup_LIM3/Michigan",
    "Erie": "/skynet3_rech1/huziy/NEMO_OFFICIAL/Simulations/1981-2000_Sim_per_lake_100yr_spinup_LIM3/Erie",
    "Ontario": "/skynet3_rech1/huziy/NEMO_OFFICIAL/Simulations/1981-2000_Sim_per_lake_100yr_spinup_LIM3/Ontario",
    "Huron": "/skynet3_rech1/huziy/NEMO_OFFICIAL/Simulations/1981-2000_Sim_per_lake_100yr_spinup_LIM3/Huron"


}



season_to_months_default = OrderedDict([
    ("Winter", [12, 1, 2]),
    ("Spring", [3,  4, 5]),
    ("Summer", [6,  7, 8]),
    ("Fall",   [9, 10, 11]),
])





def get_clevs_and_cmap_for_name(name=""):
    clevs = varname_to_colorlevels.get(name, [])
    cmap = varname_to_cmapname.get(name, None)

    if cmap is not None:
        return clevs, cm.get_cmap(cmap, len(clevs) - 1)
    return None, None


def get_mask(path="/skynet3_rech1/huziy/NEMO_OFFICIAL/dev_v3_4_STABLE_2012/NEMOGCM/CONFIG/GLK/EXP01/bathy_meter.nc"):
    """

    :param path:
    :return: True in nonmasked points and False in the masked ones
    """
    ds = Dataset(path)
    mask = ds.variables["Bathymetry"][:]
    ds.close()
    if hasattr(mask, "mask"):
        return ~mask.mask
    else:
        return (mask > 0.0001) & (mask < 1e20)


def get_basemap_and_coordinates_from_file(path="", resolution = "c"):
    """
    Returns default basemap, lons and lats from given path
    :param path:
    :return:
    """
    lons, lats = get_2d_lons_lats_from_nemo(path)
    basemap = get_default_basemap_for_glk(lons, lats, resolution = resolution)
    return basemap, lons, lats


def get_default_basemap_for_glk(lons, lats, resolution = "c"):
    rll = RotatedLatLon(lon1=domprops.lon1, lat1 = domprops.lat1, lon2=domprops.lon2, lat2=domprops.lat2)
    lonp, latp = rll.get_north_pole_coords()
    lon0, _ = rll.get_true_pole_coords_in_rotated_system()
    return Basemap(
        projection="rotpole", llcrnrlon=lons[0, 0], llcrnrlat=lats[0, 0],
        urcrnrlon=lons[-1, -1], urcrnrlat=lats[-1, -1],
        lon_0=lon0 - 180, o_lon_p = lonp, o_lat_p = latp, resolution=resolution
    )

def get_default_basemap_for_glk_2km(lons, lats):
    marginy = 1  # margin of the map in degrees
    marginx = 2

    return Basemap(epsg=3175,
                   llcrnrlon=lons.min() - marginx,
                   llcrnrlat=lats.min() - marginy,
                   urcrnrlon=lons.max() + marginx,
                   urcrnrlat=lats.max() + marginy,
                   resolution="l")


CACHE_COORDINATES = {}


def get_2d_lons_lats_from_nemo(path):
    """
    :param path:
    :return: 2D longitudes and latitudes from a file generated by nemo model
    """
    if path in CACHE_COORDINATES:
        return CACHE_COORDINATES[path]

    ds = Dataset(path)
    if "nav_lon" in ds.variables:
        lons = ds.variables["nav_lon"][:]
        lats = ds.variables["nav_lat"][:]
    else:
        lons = ds.variables["lon"][:]
        lats = ds.variables["lat"][:]

    ds.close()

    CACHE_COORDINATES[path] = (lons, lats)
    return lons, lats



shape_file_path_for_lakes = {
    "great_lakes": "data/shp/Great_lakes_coast_shape/gl_cst.shp",
    "superior": "data/shp/Superior/superior.shp",
    "erie": "data/shp/Erie/erie.shp",
    "huron": "data/shp/Huron/huron.shp",
    "ontario": "data/shp/Ontario/ontario.shp",
    "michigan": "data/shp/Michigan/michigan.shp"
}


